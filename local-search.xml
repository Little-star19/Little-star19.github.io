<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTML+CSS+JS基础知识</title>
    <link href="/2022/04/10/html-css-js/"/>
    <url>/2022/04/10/html-css-js/</url>
    
    <content type="html"><![CDATA[<h1 id="Web标准的三大组成部分"><a href="#Web标准的三大组成部分" class="headerlink" title="Web标准的三大组成部分"></a>Web标准的三大组成部分</h1><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>结构用于对网页元素进行整理和分类，HTML</td></tr><tr><td>表现</td><td>表现用于设置网页元素的排版、颜色、大小等外观样式，CSS</td></tr><tr><td>行为</td><td>行为是指网页模型的定义以及交互的编写，JavaScript</td></tr></tbody></table><h1 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法"></a>emmet语法</h1><blockquote><p>前身是Zen coding,它使用缩写，来提高html/css编写速度，Vscode已集成改语法。</p></blockquote><h2 id="emmet语法快速生成html标签"><a href="#emmet语法快速生成html标签" class="headerlink" title="emmet语法快速生成html标签"></a>emmet语法快速生成html标签</h2><ul><li>生成标签：标签名+tab</li><li>生成多个相同标签：*数字</li><li>生成父子标签：&gt;</li><li>生成兄弟标签：+</li><li>生成带有类名或id名字的：.类名/id名</li><li>生成类名是有顺序的：自增符号$</li></ul><h2 id="emmet语法快速生成css样式"><a href="#emmet语法快速生成css样式" class="headerlink" title="emmet语法快速生成css样式"></a>emmet语法快速生成css样式</h2><ul><li>采用名字简写形式即可<ul><li>如w200————width:200px;</li><li>如lh26————line-height:26px;<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>网页通常是HTML格式的文件（.htm/.html），由图片、链接、文字、声音、视频等元素构成，元素利用html标签描述出来，然后通过浏览器解析来展现给用户。<br>HTML是超文本标记语言。</p></blockquote></li></ul></li></ul><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;h1&gt;&lt;/h1&gt;&lt;h6&gt;&lt;/h6&gt;</code></pre></div><h3 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;p&gt;&lt;/p&gt;&lt;br /&gt;</code></pre></div><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;strong&gt;&lt;/strong&gt;加粗&lt;em&gt;&lt;/em&gt;斜体&lt;del&gt;&lt;/del&gt;删除线&lt;ins&gt;&lt;/ins&gt;下划线</code></pre></div><h3 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;div&gt;和&lt;span&gt;是没有语义的，他们就是一个盒子，用来装内容的。布局</code></pre></div><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;img src="图片路径" alt="替换文本" title="提示文本" width="像素" height="像素" border="像素"/&gt;</code></pre></div><ul><li>src是必须的</li></ul><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;a href="跳转目标" target="_self当前窗口/_blank新窗口"&gt;&lt;/a&gt;</code></pre></div><ul><li>href是必须的</li><li>链接类型：<ul><li>外部链接：外部网站链接</li><li>内部链接：网站内部页面</li><li>空链接：href=”#”</li><li>下载链接：href里面地址是一个文件或压缩包，会下载这个文件。</li><li>网页元素链接：网页中的各种元素（文本、图谱、表格、音频、视频等）都可以添加超链接。</li><li>锚点链接：href=”#id值”，快速定位到页面中的某个位置。</li></ul></li></ul><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;table&gt;&lt;tr&gt;    &lt;th&gt;表头1&lt;/th&gt;&lt;th&gt;表头2&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;1.1&lt;/td&gt;&lt;td&gt;1.2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;    &lt;td&gt;2.1&lt;/td&gt;&lt;td&gt;2.2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre></div><table>    <tbody><tr>        <th>表头1</th><th>表头2</th>    </tr>    <tr>        <td>1.1</td><td>1.2</td>    </tr>    <tr>        <td>2.1</td><td>2.2</td>    </tr></tbody></table><ul><li>相关属性：实际开发不常用<ul><li>align、border、cellpadding、cellspacing、width</li><li>rowspan、colspan</li></ul></li><li>表格结构标签：来更好的分清表格结构。</li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><blockquote><p>列表用来布局，整齐、整洁、有序。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">&lt;!--无序列表--&gt;&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!--有序列表（不常用）--&gt;&lt;ol&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ol&gt;&lt;!--自定义列表--&gt;&lt;dl&gt;    &lt;dt&gt;&lt;/dt&gt;    &lt;dd&gt;&lt;/dd&gt;    &lt;dd&gt;&lt;/dd&gt;&lt;/dl&gt;</code></pre></div><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><blockquote><p>表单用来收集用户信息,通常由表单域、表单控件、提示信息3个部分构成。<br>在表单域中可以定义各种表单元素，表单元素就是允许用户在表单中输入或选择的内容控件。</p></blockquote><h4 id="input表单元素"><a href="#input表单元素" class="headerlink" title="input表单元素"></a>input表单元素</h4><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>    <span class="hljs-comment">&lt;!-- text文本框：用户可以输入任何文字 --&gt;</span>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入用户名"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- password密码框：用户看不见输入的密码 --&gt;</span>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"请输入密码"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- radio单选按钮：实现多选一（name相同） --&gt;</span>    性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"男"</span>/&gt;</span> 女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"pradio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sex"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- checkbox多选按钮：实现多选（name相同） --&gt;</span>    爱好：吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"吃饭"</span>/&gt;</span> 睡觉<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobby"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"女"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><ul><li>type是必须的,name和value也应该有，主要给后台人员使用。</li><li>其他属性:checked=”checked”、maxlength=”正整数”</li><li>type属性值：text、password、radio、checkbox<ul><li>button:按钮，通常通过javascript启动脚本</li><li>reset:重置按钮，清表表单所有数据</li><li>submit:提交按钮，将表单数据发送到服务器</li><li>file:用于上传文件</li><li>image:定义图像形式的提交按钮</li><li>hidden:定义隐藏的输入字段</li></ul></li></ul><h4 id="select表单元素"><a href="#select表单元素" class="headerlink" title="select表单元素"></a>select表单元素</h4><blockquote><p>下拉列表</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">"selected"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><h4 id="textarea表单元素"><a href="#textarea表单元素" class="headerlink" title="textarea表单元素"></a>textarea表单元素</h4><blockquote><p>适用于输入内容多的情况，如留言板、评论。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">&lt;form&gt;    &lt;textarea&gt;    &lt;/textarea&gt;&lt;/form&gt;</code></pre></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://www.runoob.com/tags/ref-entities.html">特殊字符大全</a></li></ul><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>美化网页，布局页面。<br>CSS层叠样式表，标记语言。</p></blockquote><p style="text-align:center;"><img src="/2022/04/10/html-css-js/css_yufa.png" width="60%"></p><ul><li>引入方式：</li><li>1.行内样式表（行内式）:在标签内部的style属性中。<div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;标签名 <span class="hljs-attribute">style</span>=<span class="hljs-string">"属性1：属性值1；属性2：属性值2；...；"</span>&gt;</code></pre></div></li><li>2.内部样式表（嵌入式）:在html文件，一半放在标签中。<div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>css<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div></li><li>3.外部样式表（链接式）:单独写一个css文件，再把css文件引入。<div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">"css文件路径"</span>&gt;</code></pre></div></li></ul><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><ul><li>选择标签用的，分为基础选择器和复合选择器两大类。</li><li>基础选择器:标签选择器、类选择器、id选择器、通配符选择器</li><li>复合选择器：后代选择器、子选择器、并集选择器、伪类选择器</li></ul><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><blockquote><p>为同类型标签统一设置样式</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml">标签名 </span><span class="hljs-template-variable">{样式声明}</span></code></pre></div><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><blockquote><p>为某一个或某几个标签设置样式，标签内增加class=”类名”。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml">.类名 </span><span class="hljs-template-variable">{样式声明}</span></code></pre></div><ul><li>多类名:在标签class属性中写多个类名<ul><li>class=”类名1 类名2 …”</li></ul></li></ul><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><blockquote><p>为标有特定id的HTML元素指定特定的样式，一般和js搭配，标签内增加id=”类名”。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">#类名 {样式声明}</span></code></pre></div><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><blockquote><p>为页面所有元素设置样式。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>{样式声明}</code></pre></div><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><blockquote><p>选择父元素里面的子元素，通过【空格】分隔。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml">选择器1 选择器2 </span><span class="hljs-template-variable">{样式声明}</span></code></pre></div><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><blockquote><p>只选择作为某元素最近一级子元素,通过【&gt;】分隔。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml">选择器1&gt;选择器2 </span><span class="hljs-template-variable">{样式声明}</span></code></pre></div><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><blockquote><p>为选择多组标签定义相同样式,通过【,】分隔</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs dust"><span class="language-xml">选择器1,选择器2 </span><span class="hljs-template-variable">{样式声明}</span></code></pre></div><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><blockquote><p>为某些选择器添加特殊的效果,通过【:】分隔<br>有链接伪类选择器、结构伪类选择器</p></blockquote><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> {样式声明}    <span class="hljs-comment">/*选择所有未被访问的链接*/</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> {样式声明} <span class="hljs-comment">/*选择所有已被访问的链接*/</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> {样式声明}   <span class="hljs-comment">/*选择鼠标指针位于脐上的链接*/</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> {样式声明}  <span class="hljs-comment">/*选择鼠标按下未弹起的链接*/</span></code></pre></div><ul><li>按LVHA顺序声明</li><li>a链接在浏览器中有默认样式，需要给链接单独指定样式。</li></ul><h4 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h4><blockquote><p>用于获取聚焦（就是光标）的表单元素<br>一般input类表单标签才能获取</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> {样式声明}</code></pre></div><h2 id="CSS的三大特性"><a href="#CSS的三大特性" class="headerlink" title="CSS的三大特性"></a>CSS的三大特性</h2><ul><li>层叠性：相同选择器设置相同的样式，后面代码覆盖前面代码。</li><li>继承性：子标签继承父标签的某些样式，如text-,font-,line-开头的，以及color属性</li><li>优先级：！important&gt;行内样式&gt;id选择器&gt;类选择器，伪类选择器&gt;元素选择器&gt;继承或*</li><li>选择器优先级权重</li></ul><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>！important</td><td>~无穷大</td></tr><tr><td>行内样式</td><td>1,0,0,0</td></tr><tr><td>id选择器</td><td>0,1,0,0</td></tr><tr><td>类选择器，伪类选择器</td><td>0,0,1,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>继承或*</td><td>0,0,0,0</td></tr></tbody></table><ul><li>复合选择器会有CSS权重叠加的问题，如：<ul><li>div ul li————0,0,0,3</li><li>.nav ul li————0,0,1,2</li><li>a:hover—————0,0,1,1</li><li>.nav a——————0,0,1,1</li></ul></li></ul><h2 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h2><blockquote><p>显示模式就是元素以什么方式进行显示，比如div自己占一行，一行可以放多个span<br>html一般分为块元素和行内元素两种类型</p></blockquote><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><div class="hljs code-wrapper"><pre><code class="hljs xml">常见的块元素：<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>等其中<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>是最典型的块元素</code></pre></div><ul><li>独占一行</li><li>高度、宽度、内外边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或块级元素</li><li>文字类的元素不能使用块级元素p、h1~h63</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><div class="hljs code-wrapper"><pre><code class="hljs xml">常见的行内元素：<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>等其中<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>是典型的行内元素</code></pre></div><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li><li>连接内不能再放链接，<a>放块级元素，但转换块级模式最安全。</a></li><a></a></ul><a></a><h3 id="行内块元素"><a></a><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><div class="hljs code-wrapper"><pre><code class="hljs xml">常见的行内块元素：<span class="hljs-tag">&lt;<span class="hljs-name">img</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></code></pre></div><ul><li>和相邻行内或行内块元素在一行上，但之间会有空空隙，一行可以显示多个</li><li>默认宽度就是它本身内容的宽度</li><li>高度、宽度、内外边距都可以控制</li></ul><h3 id="显示模式转换"><a href="#显示模式转换" class="headerlink" title="显示模式转换"></a>显示模式转换</h3><div class="hljs code-wrapper"><pre><code class="hljs arduino">display:block/<span class="hljs-keyword">inline</span>/inline_block;</code></pre></div><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>盒子模型：就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是装内容的容器，它包括：边框、外边距、内边距和实际内容。<p style="text-align:center;"><img src="/2022/04/10/html-css-js/hezi.png" width="80%"></p></li></ul><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><blockquote><p>设置边框宽度、样式、颜色<br>盒子的宽度width值不包括边框</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">border</span>-<span class="hljs-built_in">width</span>:<span class="hljs-built_in">border</span>-<span class="hljs-built_in">style</span>:solid实线/dashed虚线/dotted电线/...<span class="hljs-built_in">border</span>-<span class="hljs-built_in">color</span>:<span class="hljs-built_in">border</span>-<span class="hljs-built_in">collapse</span>:<span class="hljs-built_in">collapse</span>;<span class="hljs-comment">/*合并相邻边框*/</span><span class="hljs-comment">/*复合属性：没有顺序*/</span><span class="hljs-built_in">border</span>:1px solid red<span class="hljs-built_in">border</span>-top:<span class="hljs-built_in">border</span>-bottom:<span class="hljs-built_in">border</span>-left:<span class="hljs-built_in">border</span>-right:</code></pre></div><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><blockquote><p>内边距也会影响盒子实际大小，没有指定width、height就不撑宽大小。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-attribute">padding-left</span>:<span class="hljs-attribute">padding-top</span>:...<span class="hljs-comment">/*复合属性*/</span><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span><span class="hljs-comment">/*上下左右都是5像素*/</span><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">10px</span><span class="hljs-comment">/*上下是5,左右是10*/</span><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span><span class="hljs-comment">/*上是5,左右是10,下是20*/</span><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span><span class="hljs-comment">/*上右下左，顺时针*/</span></code></pre></div><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><blockquote><p>基本同padding</p></blockquote><ul><li>实现块级盒子水平居中:<br>  -必须指定宽度width<br>  -盒子左右外边距设为auto,常见写法margin:10px auto</li><li>嵌套块元素垂直外边距的塌陷，解决方案：<ul><li>为父元素定义上边框</li><li>为父元素定义上内边距</li><li>为父元素添加overflow:hidden</li></ul></li><li>网页很多都带有默认的内外边距，清除内外边距:<div class="hljs code-wrapper"><pre><code class="hljs css">*{<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;}</code></pre></div></li><li>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下，但转换为块级或行内块元素就可以了。</li></ul><h2 id="三种布局方式"><a href="#三种布局方式" class="headerlink" title="三种布局方式"></a>三种布局方式</h2><ul><li>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</li><li>为了约束浮动元素位置，网页布局一般采用的策略：先用标准流的父元素排列上下位置，之后内部资源素材去浮动排列左右位置。</li></ul><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><blockquote><p>标准流就是标签按照默认方式排列</p></blockquote><h3 id="浮点流"><a href="#浮点流" class="headerlink" title="浮点流"></a>浮点流</h3><blockquote><p>流动流可以改变元素标签默认的排列方式<br>最经典的应用：让多个块级元素一行内排列显示</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">float</span>： <span class="hljs-attribute">none</span>/<span class="hljs-attribute">left</span>/<span class="hljs-attribute">right</span>；</code></pre></div><ul><li>浮动元素会脱离标准流（脱标）<br>  -脱离标准普通流的控制（浮）移动到到指定位置（动）<br>  -浮动的盒子不再保留原先的位置</li><li>浮动的元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性<br>  -行内元素有了浮动，则不需要转换为块级元素或行内块元素，就可以指定宽高。<br>  -块级盒子没有设置宽度，默认宽度和父级一样宽，添加浮动后，大小根据内容来决定。</li></ul><p class="note note-primary">【清除浮动】<br>本质是清除浮动元素造成的影响。<br>如果父盒子本身有高度，则不需要清除浮动。<br>清除浮动后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的浮动流了。</p>清除浮动的方法：<br>1.额外标签法（隔墙法）:在浮动元素末尾添加一个空标签。<br><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-comment">/*举例*/</span> &lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"clear"</span>&gt; &lt;/ <span class="hljs-keyword">div</span>&gt; .clear{clear:both<span class="hljs-regexp">/left/</span>right; }</code></pre></div>2.父级添加overflow属性<br><div class="hljs code-wrapper"><pre><code class="hljs arduino">overflow:hidden/<span class="hljs-keyword">auto</span>/scroll;</code></pre></div>3.父级添加after伪元素<br>&gt;相当于升级版的隔墙法，不过不用额外写一个标签。<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>{<span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">height</span>:;<span class="hljs-attribute">clear</span>:both;<span class="hljs-attribute">visibility</span>:hidden;}<span class="hljs-selector-class">.clearfix</span>{<span class="hljs-comment">/*为兼容IE6 7*/</span> *zoom:;}</code></pre></div>4.父级添加双伪元素<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>{<span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;<span class="hljs-attribute">display</span>:table;}<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>{<span class="hljs-attribute">clear</span>:both;}learfix{<span class="hljs-comment">/*为兼容IE6 7*/</span> *zoom:;}</code></pre></div>### 定位流&gt;定位：将盒子定在某一个位置。<br>定位=定位模式+边偏移<br>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。<ul><li>定位模式<div class="hljs code-wrapper"><pre><code class="hljs bash">position:static（静态定位）/relative（相对定位）/absolute（绝对定位）/fixed（固定定位）</code></pre></div></li><li>边偏移<div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-attribute">top</span>:几px;   <span class="hljs-comment">//顶部偏移量，定位元素相对于父元素上边线的距离。</span><span class="hljs-attribute">bottom</span>:几px;<span class="hljs-comment">//底部偏移量，定位元素相对于父元素下边线的距离。</span><span class="hljs-attribute">left</span>:几px;  <span class="hljs-comment">//左侧偏移量，定位元素相对于父元素左边线的距离。</span><span class="hljs-attribute">right</span>:几px; <span class="hljs-comment">//右侧偏移量，定位元素相对于父元素右边线的距离。</span></code></pre></div></li></ul><h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><blockquote><p>定义字体系列、大小、粗细和字体样式。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">font-family: 字体1,字体2,...;font-size: 几px; font-weight: normal（400）/bold（700）/bolder/lighter/数字；font-style: normal/italic（斜体）;/*复合属性:把以上样式综合起来写，不能更换顺序，必须保留font-size和font-family属性。*/font: 字体样式 粗细 大小/行高 系列;</code></pre></div><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><blockquote><p>定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs">color: #FF0000/rgb(255,0,0)/rgb(100%,0%,0%)/red;text-align: center/right/left;text-decoration:none/underline/overline/line-through;text-indent: 数字px/数字em;line-height: 数字px/数字（当前文字大小的几倍）</code></pre></div><h3 id="单行文字垂直居中"><a href="#单行文字垂直居中" class="headerlink" title="单行文字垂直居中"></a>单行文字垂直居中</h3><ul><li>解决方案：文字的行高=盒子的高度</li></ul><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><blockquote><p>定义背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: 颜色值;<span class="hljs-comment">/*默认值：transparent(透明)*/</span><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">图片地址</span>);<span class="hljs-attribute">background-repeat</span>: repeat/no-repeat/repeat-x/repeat-ybackground-position: x y;<span class="hljs-comment">/*xy可以用方位名词或精确单位*/</span><span class="hljs-comment">/*方位名词：top/center/bottom/left/center/right*/</span><span class="hljs-attribute">background-attachment</span>: scroll/fixed;<span class="hljs-comment">/*复合属性：*/</span>backgroud: 颜色 图片路径 图背景平铺 固定 位置;<span class="hljs-comment">/*背景色半透明*/</span><span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(R,G,B,透明度<span class="hljs-number">0</span>-<span class="hljs-number">1</span>);</code></pre></div><h2 id="圆角边框（CSS3新增）"><a href="#圆角边框（CSS3新增）" class="headerlink" title="圆角边框（CSS3新增）"></a>圆角边框（CSS3新增）</h2><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>:<span class="hljs-built_in">length</span>;<span class="hljs-comment">/*length为下面圆半径，值越大越圆*/</span><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>:<span class="hljs-number">50</span><span class="hljs-symbol">%</span>;<span class="hljs-comment">/*盒子高度的一半，圆形*/</span></code></pre></div><p style="text-align:center;"><img src="/2022/04/10/html-css-js/border_radius.png" width="80%"></p><h2 id="盒子阴影（CSS3新增）"><a href="#盒子阴影（CSS3新增）" class="headerlink" title="盒子阴影（CSS3新增）"></a>盒子阴影（CSS3新增）</h2><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">h-shadow</span>(水平阴影位置) <span class="hljs-built_in">v-shadow</span>(垂直阴影位置) <span class="hljs-built_in">blur</span>(模糊距离) <span class="hljs-built_in">spread</span>(阴影尺寸) <span class="hljs-built_in">color</span>(阴影颜色) <span class="hljs-built_in">inset</span>(内阴影，默认外阴影-不写);</code></pre></div><ul><li>前两个属性必须要写</li></ul><h2 id="文字阴影（CSS3新增）"><a href="#文字阴影（CSS3新增）" class="headerlink" title="文字阴影（CSS3新增）"></a>文字阴影（CSS3新增）</h2><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">text-<span class="hljs-keyword">shadow: </span>h-<span class="hljs-keyword">shadow </span>v-<span class="hljs-keyword">shadow </span><span class="hljs-keyword">blur </span>color</code></pre></div><h2 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h2><p>1.布局定位属性：display/position/float/clear/visibility/overflow<br><br>2.自身属性：width/height/margin/padding/border/background<br>3.文本属性：color/font/text-decoration/text-align/vertical-align/white-space/break-word<br>4.其他属性(CSS3)：content/cursor/border-radius/box-shadow/background:linear-gradient…</p>]]></content>
    
    
    <categories>
      
      <category>学习区</category>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于知识图谱的医疗问答系统</title>
    <link href="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/"/>
    <url>/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/</url>
    
    <content type="html"><![CDATA[<p>It is indeed a luxury to keep human reason forever. by  Moss, a robot of the film The Wandering Earth</p><p>“让人类永远保持理智，确实是一种奢求” ，机器人莫斯，《流浪地球》</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/show_talk.gif" alt="Sample" width="700">    </p><p align="center">        <em> </em>    </p><p></p><ul><li><p><a href="#%E9%A1%B9%E7%9B%AE%E6%A6%82%E5%86%B5">0.项目概况</a></p></li><li><p><a href="#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96">1.基础数据爬取</a></p></li><li><p><a href="#%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%90%AD%E5%BB%BA">2.知识图谱搭建</a></p></li><li><p><a href="#%E8%87%AA%E5%8A%A8%E9%97%AE%E7%AD%94%E5%AE%9E%E7%8E%B0">3.自动问答实现</a></p><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87">数据准备</a></li><li><a href="#%E8%AF%8D%E5%90%91%E9%87%8F%E8%AE%AD%E7%BB%83">词向量训练</a></li><li><a href="#%E5%8C%BB%E7%96%97%E5%91%BD%E5%90%8D%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB">医疗命名实体识别</a><ul><li><a href="#%E5%B5%8C%E5%85%A5%E5%B1%82">嵌入层</a></li><li><a href="#%E5%8F%A5%E5%AD%90%E8%BE%93%E5%85%A5%E5%88%B0BiLSTM%E5%B1%82">BiLSTM层</a></li><li><a href="#CRF%E5%B1%82">CRF层</a></li><li><a href="#%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD">损失函数及反向传播</a></li><li><a href="#%E5%BE%AA%E7%8E%AF%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E4%B8%8E%E8%B6%85%E5%8F%82%E6%95%B0">网络结构与超参数</a></li></ul></li><li><a href="#%E7%94%A8%E6%88%B7%E6%84%8F%E5%9B%BE%E8%AF%86%E5%88%AB">用户意图识别</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%B5%8C%E5%85%A5%E4%BA%BA%E5%B7%A5%E7%89%B9%E5%BE%81">数据嵌入人工特征</a></li><li><a href="#%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9">模型选择</a></li><li><a href="#%E5%B5%8C%E5%85%A5%E5%B1%82">嵌入层</a></li><li><a href="#%E5%8D%B7%E7%A7%AF%E5%B1%82">卷积层</a></li><li><a href="#%E6%B1%A0%E5%8C%96%E5%B1%82">池化层</a></li><li><a href="#%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%8F%8ASoftMax%E5%88%86%E7%B1%BB%E5%B1%82">全连接及SoftMax层</a></li><li><a href="#%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E4%B8%8E%E8%B6%85%E5%8F%82%E6%95%B0">网络结构与超参数</a></li></ul></li></ul></li><li><p><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></p></li></ul><h3 id="项目概况"><a href="#项目概况" class="headerlink" title="项目概况"></a>项目概况</h3><p>本项目为一个使用深度学习方法解析问题，知识图谱存储、查询知识点，基于医疗垂直领域的对话系统的后台程序</p><ul><li>运行效果：</li></ul><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082601.png" alt="Sample" width="700">    </p><p align="center">        <em> </em>    </p><p></p><ul><li><p>项目的搭建大致分为三个模块：</p><ul><li>基础数据爬取</li><li>知识图谱构建</li><li>自动问答实现</li></ul></li><li><p>项目运行环境：</p></li></ul><p>python   : </p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> <span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">8</span></code></pre></div><p>运行系统：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ubuntu</span> <span class="hljs-number">16</span>.<span class="hljs-number">04</span></code></pre></div><p>知识图谱：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">neo4j</span>           <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> 图形数据库<span class="hljs-attribute">py2neo</span>          <span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>  neo4j对应的python驱动</code></pre></div><p>深度学习：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">jieba</span>           <span class="hljs-number">0</span>.<span class="hljs-number">39</span>   <span class="hljs-attribute">numpy</span>           <span class="hljs-number">1</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span> <span class="hljs-attribute">pandas</span>          <span class="hljs-number">0</span>.<span class="hljs-number">25</span>.<span class="hljs-number">0</span> <span class="hljs-attribute">tensorflow</span>      <span class="hljs-number">1</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span></code></pre></div><p>文本匹配：</p><div class="hljs code-wrapper"><pre><code class="hljs cmake">ahocorasick    （安装方法 pip <span class="hljs-keyword">install</span> pyahocorasick）</code></pre></div><p>必要说明：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">1.深度学习模块深度网络的训练使用tensorflow的gpu版本，  在应用阶段由于要部署要服务器上使用的对应的tensorflow的cpu版本2.若要<span class="hljs-built_in">clone</span>项目，尽量保持扩展包的版本一致</code></pre></div><ul><li>项目运行方式</li></ul><ol><li>搭建知识图谱：python build_grapy.py。大概几个小时，耐心等待。 </li><li>启动问答系统：python chatbot_graph.py</li></ol><ul><li>项目主要文件目录结构</li></ul><div class="hljs code-wrapper"><pre><code class="hljs shell">chatbot├── answer_search.py                        # 问题查询及返回├── BiLSTM_CRF.py                           # 实体识别的双向LSTM-CRF网络├── build_medicalgraph.py                   # 将结构化json数据导入neo4j├── chatbot_graph.py                        # 问答程序脚本├── classifyApp.py                          # 问句分类应用脚本├── classifyUtils.py                        # 工具函数集合├── data│&nbsp;&nbsp; └── medical.json                        # 全科知识数据├── data_ai│&nbsp;&nbsp; ├── cbowData                            # 词向量文件│&nbsp;&nbsp; │&nbsp;&nbsp; ├── classifyDocument.txt.ebd.npy    # 词向量查找表│&nbsp;&nbsp; │&nbsp;&nbsp; ├── classifyDocument.txt.vab        # 词向量中词与索引对照表│&nbsp;&nbsp; │&nbsp;&nbsp; ├── document.txt.ebd.npy            │&nbsp;&nbsp; │&nbsp;&nbsp; └── document.txt.vab│&nbsp;&nbsp; ├── classifyData                        # 问句分类训练数据│&nbsp;&nbsp; │&nbsp;&nbsp; ├── test_data.txt│&nbsp;&nbsp; │&nbsp;&nbsp; └── train_data.txt│&nbsp;&nbsp; ├── classifyModel                       # 问句分类模型│&nbsp;&nbsp; │&nbsp;&nbsp; ├── checkpoint│&nbsp;&nbsp; │&nbsp;&nbsp; ├── model-3500.data-00000-of-00001│&nbsp;&nbsp; │&nbsp;&nbsp; ├── model-3500.index│&nbsp;&nbsp; │&nbsp;&nbsp; └── model-3500.meta│&nbsp;&nbsp; ├── nerData                          │&nbsp;&nbsp; └── nerModel                            # 命名实体识别模型├── dict                                    # 实体数据文件├── nerApp.py                               # 命名实体识别应用脚本├── nerUtils.py                             # 工具函数集合├── prepare_data                           │&nbsp;&nbsp; ├── build_data.py                       # 数据库操作脚本│&nbsp;&nbsp; ├── data_spider.py                      # 数据采集脚本│&nbsp;&nbsp; └── max_cut.py                          # 基于词典的最大前向/后向匹配├── question_analysis.py                    # 问句类型分类脚本├── question_parser.py                      # 回答生成脚本└── text_cnn.py                             # 文本分类的cnn网络</code></pre></div><h3 id="基础数据爬取"><a href="#基础数据爬取" class="headerlink" title="基础数据爬取"></a>基础数据爬取</h3><p>基础数据爬取于<a href="http://www.xywy.com/">寻医问药</a>网站，一家医疗信息提供平台，上面的数据做了较好的分类处理，爬下来后可以较为方便的保存为json格式的结构化文件，格式展示如下：</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/json_show.gif" alt="Sample" width="700">    </p><p align="center">        <em> 爬取的数据保存为json格式文件 </em>    </p><p></p><h3 id="知识图谱搭建"><a href="#知识图谱搭建" class="headerlink" title="知识图谱搭建"></a>知识图谱搭建</h3><p>知识图谱可以用若干三元组来表示，三元组的基本形式：</p><ul><li>实体1-关系-实体2</li><li>实体-属性-属性值</li></ul><p>将爬取的数据调用<code>build_medicalgraph.py    </code>脚本将结构化json数据导入neo4j图数据库，部分数据库展示如下：</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/graph.svg" alt="Sample" width="800">    </p><p align="center">        <em> 图形数据库部分展示 </em>    </p><p></p><p>知识图谱实体类型</p><table><thead><tr><th align="left">实体类型</th><th align="center">中文含义</th><th align="center">实体数量</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">Check</td><td align="center">诊断检查项目</td><td align="center">3,353</td><td align="left">支气管造影;关节镜检查</td></tr><tr><td align="left">Department</td><td align="center">医疗科目</td><td align="center">54</td><td align="left">整形美容科;烧伤科</td></tr><tr><td align="left">Disease</td><td align="center">疾病</td><td align="center">8,807</td><td align="left">血栓闭塞性脉管炎;胸降主动脉动脉瘤</td></tr><tr><td align="left">Drug</td><td align="center">药品</td><td align="center">3,828</td><td align="left">京万红痔疮膏;布林佐胺滴眼液</td></tr><tr><td align="left">Food</td><td align="center">食物</td><td align="center">4,870</td><td align="left">番茄冲菜牛肉丸汤;竹笋炖羊肉</td></tr><tr><td align="left">Producer</td><td align="center">在售药品</td><td align="center">17,201</td><td align="left">通药制药青霉素V钾片;青阳醋酸地塞米松片</td></tr><tr><td align="left">Symptom</td><td align="center">疾病症状</td><td align="center">5,998</td><td align="left">乳腺组织肥厚;脑实质深部出血</td></tr><tr><td align="left">Total</td><td align="center">总计</td><td align="center">44,111</td><td align="left">约4.4万实体量级</td></tr></tbody></table><p>知识图谱实体关系类型</p><table><thead><tr><th align="left">实体关系类型</th><th align="center">中文含义</th><th align="center">关系数量</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">belongs_to</td><td align="center">属于</td><td align="center">8,844</td><td align="left">&lt;妇科,属于,妇产科&gt;</td></tr><tr><td align="left">common_drug</td><td align="center">疾病常用药品</td><td align="center">14,649</td><td align="left">&lt;阳强,常用,甲磺酸酚妥拉明分散片&gt;</td></tr><tr><td align="left">do_eat</td><td align="center">疾病宜吃食物</td><td align="center">22,238</td><td align="left">&lt;胸椎骨折,宜吃,黑鱼&gt;</td></tr><tr><td align="left">drugs_of</td><td align="center">药品在售药品</td><td align="center">17,315</td><td align="left">&lt;青霉素V钾片,在售,通药制药青霉素V钾片&gt;</td></tr><tr><td align="left">need_check</td><td align="center">疾病所需检查</td><td align="center">39,422</td><td align="left">&lt;单侧肺气肿,所需检查,支气管造影&gt;</td></tr><tr><td align="left">no_eat</td><td align="center">疾病忌吃食物</td><td align="center">22,247</td><td align="left">&lt;唇病,忌吃,杏仁&gt;</td></tr><tr><td align="left">recommand_drug</td><td align="center">疾病推荐药品</td><td align="center">59,467</td><td align="left">&lt;混合痔,推荐用药,京万红痔疮膏&gt;</td></tr><tr><td align="left">recommand_eat</td><td align="center">疾病推荐食谱</td><td align="center">40,221</td><td align="left">&lt;鞘膜积液,推荐食谱,番茄冲菜牛肉丸汤&gt;</td></tr><tr><td align="left">has_symptom</td><td align="center">疾病症状</td><td align="center">5,998</td><td align="left">&lt;早期乳腺癌,疾病症状,乳腺组织肥厚&gt;</td></tr><tr><td align="left">acompany_with</td><td align="center">疾病并发疾病</td><td align="center">12,029</td><td align="left">&lt;下肢交通静脉瓣膜关闭不全,并发疾病,血栓闭塞性脉管炎&gt;</td></tr><tr><td align="left">Total</td><td align="center">总计</td><td align="center">294,149</td><td align="left">约30万关系量级</td></tr></tbody></table><p>知识图谱属性类型</p><table><thead><tr><th align="left">属性类型</th><th align="center">中文含义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="left">name</td><td align="center">疾病名称</td><td align="center">喘息样支气管炎</td></tr><tr><td align="left">desc</td><td align="center">疾病简介</td><td align="center">又称哮喘性支气管炎…</td></tr><tr><td align="left">cause</td><td align="center">疾病病因</td><td align="center">常见的有合胞病毒等…</td></tr><tr><td align="left">prevent</td><td align="center">预防措施</td><td align="center">注意家族与患儿自身过敏史…</td></tr><tr><td align="left">cure_lasttime</td><td align="center">治疗周期</td><td align="center">6-12个月</td></tr><tr><td align="left">cure_way</td><td align="center">治疗方式</td><td align="center">“药物治疗”,”支持性治疗”</td></tr><tr><td align="left">cured_prob</td><td align="center">治愈概率</td><td align="center">95%</td></tr><tr><td align="left">easy_get</td><td align="center">疾病易感人群</td><td align="center">无特定的人群</td></tr></tbody></table><h3 id="自动问答实现"><a href="#自动问答实现" class="headerlink" title="自动问答实现"></a>自动问答实现</h3><p>自动问答采用深度学习的方法，由于缺少问句训练语料，训练数据来源于自制的问句生成器，然后对问句分词，问句中的每个词进行嵌入，即由词向量组成的问句代替自然语言的问句输入，再进行命名实体识别及实体/问句关系抽取（问句分类），实现对问句的语义解析。</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082501.png" alt="Sample" width="600">    </p><p align="center">        <em> 自动问答实现流程图 </em>    </p><p></p><p>本仓库为了代码结构清晰，只放了深度学习的模型应用的脚本，词向量及模型训练的脚本会放在另一个代码仓库中。</p><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><ul><li>数据冷启动</li></ul><p>问句解析部分是用深度学习的方法实现的，那自然需要数据来训练模型。在通常的垂直领域内，由于缺乏系统性地数据积累或合作项目，本项目所用地问句语义解析必须依赖大规模地问句语料，因此设计了一个问句生成器（专业点地叫法为数据冷启动？），就是根据设定好的问句模板将上文爬取到的实体填充到模板的槽当中，同时对问句进行逐词的命名实体标注（BIOES标注法）及问句类别标注，用于后面的实体抽取及实体/问句关系抽取（问句分类）</p><p>命名实体标注标签：</p><table><thead><tr><th>实体</th><th>序号</th><th>含义</th></tr></thead><tbody><tr><td>O</td><td>0</td><td>其它</td></tr><tr><td>B-dis</td><td>1</td><td>疾病实体开头</td></tr><tr><td>I-dis</td><td>2</td><td>疾病实体中间</td></tr><tr><td>E-dis</td><td>3</td><td>疾病实体末尾</td></tr><tr><td>B-sym</td><td>4</td><td>症状</td></tr><tr><td>I-sym</td><td>5</td><td></td></tr><tr><td>E-sym</td><td>6</td><td></td></tr><tr><td>B-dru</td><td>7</td><td>药品</td></tr><tr><td>I-dru</td><td>8</td><td></td></tr><tr><td>E-dru</td><td>9</td><td></td></tr><tr><td>S-dis</td><td>10</td><td>单个-疾病实体</td></tr><tr><td>S-sym</td><td>11</td><td></td></tr><tr><td>S-dru</td><td>12</td><td></td></tr></tbody></table><p>问句类别标注标签</p><table><thead><tr><th>类别</th><th>序号</th><th>含义</th></tr></thead><tbody><tr><td>disease_symptom</td><td>0</td><td>疾病有啥症状</td></tr><tr><td>symptom_curway</td><td>1</td><td>症状有啥治疗方法</td></tr><tr><td>symptom_disease</td><td>2</td><td>症状对应啥疾病</td></tr><tr><td>disease_drug</td><td>3</td><td>疾病要吃啥药品</td></tr><tr><td>drug_disease</td><td>4</td><td>药品治疗啥疾病</td></tr><tr><td>disease_check</td><td>5</td><td>疾病要做啥检查检查</td></tr><tr><td>disease_prevent</td><td>6</td><td>疾病有啥预防方式</td></tr></tbody></table><ul><li>数据增强</li></ul><p>经过人工造问句后，再针对问句结构类型单一不够多样进行了数据增强，比如采取了如下措施：句子结构倒装，同义词替换，随机插入标点加入噪音</p><ul><li>数据类别平衡及shuffle</li></ul><p>在未做类别平衡及数据shuffle时，模型会严重过拟合，有时只能预测出一种结果，在测试集上正确率很低，做了类别平衡及输入数据打乱之后预测结果大幅改观</p><h4 id="词向量训练"><a href="#词向量训练" class="headerlink" title="词向量训练"></a>词向量训练</h4><p>采用词向量模型中的连续词袋模型cbow进行词向量的训练</p><p>一些参数：</p><table><thead><tr><th>参数名</th><th>参数值</th></tr></thead><tbody><tr><td>学习率</td><td>0.0001</td></tr><tr><td>词向量长度（中间/隐藏层维度）</td><td>200</td></tr><tr><td>上下文window_size</td><td>10</td></tr><tr><td>batch_size</td><td>300</td></tr><tr><td>最小词频min_frq</td><td>2</td></tr></tbody></table><p>值得注意的是：</p><ol><li><p>词向量的训练也会有loss，但是在训练词向量的过程中没有太必要关注其loss，因为训练词向量一般只是我们想要的中间结果，与我们的目的相去甚远，经验是等loss稳定之后将词向量先用于后面的任务，看后面任务的实际效果怎么样，若效果不佳再调整参数甚至更换其它词向量模型。</p></li><li><p>最开始是用的字向量，但是用于之后的任务效果不佳，会出现ner标注偏执及正确率低的现象。然后使用了词向量，效果提升较大。究其原因可能是词包含的信息更多，对模型的辅助效果更明显</p></li><li><p>网上说词向量一般在<code>200~300</code>维度表示效果较好，字向量在<code>100~200</code>维度就够了，当语料很小时候，词向量维度应调小。实际测试在10多M的语料大小情况下，词向量维度50都能达到可用效果。</p></li></ol><h4 id="医疗命名实体识别"><a href="#医疗命名实体识别" class="headerlink" title="医疗命名实体识别"></a>医疗命名实体识别</h4><ul><li>模型训练描述</li></ul><p>在知识库问答系统处理过程中，解析问句意图首先需要进行命名实体识别（NER），正确提取出问句中询问的医疗实体。当前NER模型大多采用LSTM-CRF模型。基于词的中文NER，则需要预先对句子进行分词。</p><h5 id="嵌入层"><a href="#嵌入层" class="headerlink" title="嵌入层"></a>嵌入层</h5><p>最开始我是用的字向量，但是效果不好，换成了词向量。句子分词后，将每个词查找词向量的lookup tabel获得对应词向量，用词向量替换原句子中的词，形成新的句子作为输入，为保证训练效果，当句子太长时候要截断，句子太短时要填充，本项目使用的0填充。</p><h5 id="BiLSTM层"><a href="#BiLSTM层" class="headerlink" title="BiLSTM层"></a>BiLSTM层</h5><p>然后将规整后的句子输入到BiLSTM网络中，就是句子正向导入LSTM网络一次，再把句子反向导入LSTM网络一次，经过多次迭代输出LSTM网络的两个预测结果（正向，反向），然后将两个预测结果拼接成一个长向量作为下一层的CRF层的输入</p><p>具体是怎么拼接的：做ner时，前向时候得到的LSTM的的中间状态输出向量和后向时中间状态输出向量中对应的单词的中间状态拼接，如下图：</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082502.png" alt="Sample" width="550">    </p><p align="center">        <em> lstm中间状态向量拼接作为输出用于ner </em>    </p><p></p><p>若用于句子的情感分类则作以下拼接：</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082503.png" alt="Sample" width="550">    </p><p align="center">        <em> lstm中间状态向量拼接作为输出用于情感分类 </em>    </p><p></p><p>图片来至<a href="https://segmentfault.com/p/1210000016830547/read#top">详解BiLSTM及代码实现</a></p><p>tensorflow中tf.nn.dynamic_rnn函数</p><div class="hljs code-wrapper"><pre><code class="hljs python">outputs, state = tf.nn.dynamic_rnn(    cell,    inputs,    sequence_length=<span class="hljs-literal">None</span>,    initial_state=<span class="hljs-literal">None</span>,    dtype=<span class="hljs-literal">None</span>,    parallel_iterations=<span class="hljs-literal">None</span>,    swap_memory=<span class="hljs-literal">False</span>,    time_major=<span class="hljs-literal">False</span>,    scope=<span class="hljs-literal">None</span>)其中两个返回值：outputs: The RNN output Tensor. this will be a Tensor shaped: [batch_size, max_time, cell.output_size].state: The final state. If cell.state_size <span class="hljs-keyword">is</span> an <span class="hljs-built_in">int</span>, this will be shaped [batch_size, cell.state_size].</code></pre></div><p>第一个输出<code>outputs</code>就是一批数据的中间状态输出的集合（张量）。第二个输出<code>state</code>就是LSTM最后一个状态，</p><p>它含了一个方向的所有信息</p><h5 id="CRF层"><a href="#CRF层" class="headerlink" title="CRF层"></a>CRF层</h5><p>CRF的<code>转移矩阵A</code>由神经网络的CRF学习得到，而<code>发射概率矩阵P</code> 就是由Bi-LSTM的输出来作近似模拟。</p><p>这样有了（A,P,$\pi$）就可以调用viterbi算法进行解码做预测了</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082504.png" alt="Sample" width="800">    </p><p align="center">        <em> Bi-LSMT+CRF </em>    </p><p></p>##### 损失函数及反向传播<p>损失函数用的tensorflow的<code>crf.crf_log_likelihood</code>，对数似然函数</p><p>目标函数是的<code>-tf.reduce_mean(crf.crf_log_likelihood)</code>，即对数自然函数的均值的负数，这和LR回归的目标函数一样</p><p>反向传播更新参数，进行下一批数据前向传播训练</p><h5 id="循环网络结构与超参数"><a href="#循环网络结构与超参数" class="headerlink" title="循环网络结构与超参数"></a>循环网络结构与超参数</h5><p>a）使用句子分词后词的词向量作为输入，</p><p>b）dropout的值调到0.5，</p><p>c）句子的最大长度sentence_length调到30以下（我使用的20），</p><p>d）句子填充那里使用的0填充，</p><p>e）语料中实体种类数目做平衡（不出现某个种类严重偏执，否者就回导致预测偏执严重和过拟合），</p><p>f）语料标注使用的BIOES标注（之前用的BIO标注）</p><p>训练出来模型的F1值可以达到0.98，</p><table><thead><tr><th>参数名</th><th>参数值</th></tr></thead><tbody><tr><td>lstm 隐藏层维度</td><td>600</td></tr><tr><td>学习速率</td><td>0.00075</td></tr><tr><td>batch_size</td><td>100</td></tr><tr><td>句子截断长度</td><td>25</td></tr><tr><td>梯度截断</td><td>[-5,5]</td></tr><tr><td>标签数目</td><td>13</td></tr><tr><td>训练时dropout</td><td>0.5</td></tr><tr><td>句子填充</td><td>0值填充</td></tr><tr><td>句子标注方式</td><td>BIOES法</td></tr></tbody></table><h4 id="用户意图识别"><a href="#用户意图识别" class="headerlink" title="用户意图识别"></a>用户意图识别</h4><p>通过命名实体识别模型正确提取出问句中询问的医疗实体之后，还需要理解用户问句的意图，其意图的具体表现就是医疗实体的关系或属性，即需要进行问句意图和知识库关系的映射。考虑医疗问诊场景的用户问题通常是短文本，因此本项目将用户意图识别设定为短文本分类任务</p><h5 id="数据嵌入人工特征"><a href="#数据嵌入人工特征" class="headerlink" title="数据嵌入人工特征"></a>数据嵌入人工特征</h5><p>数据同样用冷启动的方式获得大量数据，然后将在上一轮识别出来的命名实体类别嵌入到句子中，增加句子的区分度</p><div class="hljs code-wrapper"><pre><code class="hljs">得了感冒要吃啥药嵌入人工特征：得了感冒disease要吃啥药</code></pre></div><h5 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h5><p>由n-gram语言模型可知，自然语言存在局部特征，卷积神经网络（CNN）可用来提取局部特征，如今常被用于表示句子级别的信息和短文本分类任务，结合识别出的医疗实体实现用户问句的意图理解。</p><p>短文本有其特点，局部信息可决定句子意图，比如像<code>我头疼发烧流鼻涕，这是啥病</code>与问句<code>这是啥病，我最近发烧流鼻涕头疼</code>里面的整体与局部语序换了，但是句子意图没有变，所以短文本适用于CNN。长文本可用LSTM，attention，有大量训练语料则bert有优势，需要快速但精确度要求不高可用fasttext模型。</p><h5 id="嵌入层-1"><a href="#嵌入层-1" class="headerlink" title="嵌入层"></a>嵌入层</h5><p>将词表示成具有相同长度的词向量，句子就可表示成词向量的矩阵，一个二维的矩阵，这个矩阵可以类比为一张单通道的图片，若图片时RGB三通道图片，则在这里，我们的词可以采用不同的嵌入方式，比如字嵌入，或者golve形式的词向量，这样就可得到多层的句子词向量矩阵。</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082505.png" alt="Sample" width="800">    </p><p align="center">        <em> textCNN词的嵌入 </em>    </p><p></p>##### 卷积层<ol><li>一个长度为n的句子被视为N个word的拼接(concatenation)，每个word 的embedding有k维，则concat后的句子表示为一个N x k的矩阵，即神经网络的输入</li><li>由于图像是二维（长和宽）三通道(RGB)，而句子是一维的（word按顺序拼接）（可以L通道，即使用L种不同的embedding方法，就可以形成L层输入为N x k的矩阵），因此这里的CNN的filter（卷积核）的大小都为h x k（h为卷积核所围窗口中单词的个数） ，即每个filter扫过的区域是从上往下覆盖到h个word的所有embedding长度</li><li>根据n-gram模型，可选取几个不同大小(h不同的)filter去学习句子的不同的局部特征，得到不同的feature map。</li></ol><h5 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h5><p>在得到每个卷积核的feature map之后，要做一个max-pooling，即max(c)</p><p>max-pooling的用处是：<br> 1.使得可以输入不同长度的句子。长度不同的sentence经过这个卷积核后得到的特征都为1维<br> 2.能够有效抓取句子的最突出特征。比如一个卷积核是用来检测是否存在not like这样的负面评论，则不论出现该模式出现在句子的哪里，前面还是后面，这个卷积核都能取得很高的卷积值。</p><p>当然Pooling会损失句子的order信息，比如最显著的模式出现的位置（句子的前面还是后面），因此又多种基于Pooling的优化：如k-max pooling（保留feature map中K个最大的值）或者dynamic k-max pooling （sentence分为几段，每一段取一个最大值）</p><h5 id="全连接及SoftMax分类层"><a href="#全连接及SoftMax分类层" class="headerlink" title="全连接及SoftMax分类层"></a>全连接及SoftMax分类层</h5><p>一个句子从输入卷积层，再到最大池化后的数据，拼接成一个向量（一共有多少个feature map，这个向量就有多少维），然后喂入全连接层。比如作13分类，则全链接的输出就是13维的向量</p><p>最后接一层全连接的 softmax 层，输出每个类别的概率。</p><p>注意：一般之后还会过一个tf.argmax函数过程，就是将向量中最大的概率变那一位为1，其余变成0</p><h5 id="卷积网络结构与超参数"><a href="#卷积网络结构与超参数" class="headerlink" title="卷积网络结构与超参数"></a>卷积网络结构与超参数</h5><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>嵌入层（词向量）维度</td><td>200</td></tr><tr><td>卷积核尺寸</td><td>h=2,3,4   此外不做填充，步长=1</td></tr><tr><td>卷积核个数</td><td>各种尺寸各128个</td></tr><tr><td>dropout_keep_prob</td><td>0.5</td></tr><tr><td>batch_size</td><td>300</td></tr><tr><td>预测类别</td><td>9</td></tr><tr><td>学习率</td><td>0.0001</td></tr><tr><td>l2正则化系数</td><td>3</td></tr></tbody></table><p>另外还指定了句子截断长度为20，textcnn可以不用要求指定输入句子的长度，但是发现tensorflow运行时会说不指明input的所有维度会分配很多内存，以免溢出，就会占用大量内存，所以指明了。</p><p>一个textcnn的参考图</p><p align="center">    <img src="/2022/04/10/ji-yu-zhi-shi-tu-pu-de-yi-liao-wen-da-xi-tong/082506.png" alt="Sample" width="800">    </p><p align="center">        <em> textCNN </em>    </p><p></p><a href="#回答生成" class="headerlink" title="回答生成"></a>回答生成<p>知识图谱三元组&lt;实体，关系，实体&gt;或者是&lt;实体，属性，属性值&gt;</p><p>前面抽取的“医疗命名实体”就三元组的第一个元素——实体</p><p>前面进行的“用户意图识别”则是三元组中的第二个元素——关系/属性</p><p>得到三元组的这两个元素就可以用cypher语言在neo4j图数据库中进行查找对应的实体或属性值，然后构建回答返回给用户</p><div class="hljs code-wrapper"><pre><code class="hljs python">  <span class="hljs-keyword">def</span> <span class="hljs-title function_">sql_transfer</span>(<span class="hljs-params">self, question_type, entities</span>):      <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> entities:          <span class="hljs-keyword">return</span> []      <span class="hljs-comment"># 查询语句</span>      sql = []      <span class="hljs-comment"># 查询疾病的原因</span>      <span class="hljs-keyword">if</span> question_type == <span class="hljs-string">'disease_cause'</span>:          sql = [<span class="hljs-string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cause"</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> entities]      <span class="hljs-comment"># 查询疾病的防御措施</span>      <span class="hljs-keyword">elif</span> question_type == <span class="hljs-string">'disease_prevent'</span>:          sql = [<span class="hljs-string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.prevent"</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> entities]      <span class="hljs-comment"># 查询疾病的持续时间</span>      <span class="hljs-keyword">elif</span> question_type == <span class="hljs-string">'disease_lasttime'</span>:          sql = [<span class="hljs-string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cure_lasttime"</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> entities]      <span class="hljs-comment"># 查询疾病的治愈概率</span>      <span class="hljs-keyword">elif</span> question_type == <span class="hljs-string">'disease_cureprob'</span>:          sql = [<span class="hljs-string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cured_prob"</span>.<span class="hljs-built_in">format</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> entities]<span class="hljs-string">'''</span><span class="hljs-string">...</span><span class="hljs-string">'''</span>      <span class="hljs-keyword">return</span> sql</code></pre></div><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://arxiv.org/pdf/1508.01991v1.pdf">Bidirectional LSTM-CRF Models for Sequence Tagging</a></p><p><a href="https://arxiv.org/pdf/1408.5882.pdf">Convolutional Neural Networks for Sentence Classification</a></p><p><a href="http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/">Understanding Convolutional Neural Networks for NLP</a></p>]]></content>
    
    
    <categories>
      
      <category>学习区</category>
      
      <category>自然语言处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>互联网是如何运作的？</title>
    <link href="/2022/04/08/ji-suan-ji-wang-luo/"/>
    <url>/2022/04/08/ji-suan-ji-wang-luo/</url>
    
    <content type="html"><![CDATA[<p>计算机网络相关知识在此记录，未完待续~</p><span id="more"></span><p class="note note-primary">你是如何访问到哔哩哔哩站点数据的？</p><ul><li><p>当你的计算机连接到互联网后，会被分配一个IP地址。哔哩哔哩服务器也连接网络，它也有一个IP地址。访问某网站呢，就是在访问这个网站的服务器。<br></p></li><li><p>你的计算机发送消息给哔哩哔哩服务器：我要index.html的内容，请把它传给我。（HTTP协议生成目标服务器的HTTP请求报文）</p></li><li><p>消息在发送前会被分解为许多片段，称为数据包。（HTTP协议）</p></li><li><p>每个数据包都会被分配一个端口号，用来确定目标计算机的哪一个应用程序要接受并使用这个数据包。（TCP协议，面向连接的可靠字节流服务协议，三次握手）</p></li><li><p>数据包又被赋予目标计算机的IP地址(IP协议)</p></li><li><p>数据包的文本信息将会被转化为电子信号，通过电缆发送给哔哩哔哩服务器。</p></li><li><p>-在电缆的另一端检查每个数据包中的目标地址，并确定将其发送到何处，最终数据包打到服务器。</p></li><li><p>数据包的文本信息电子信号转化为计算机可以使用的文本数据。</p></li></ul><p>TCP/IP协议族</p><p>应用层：提供特定于应用程序的浏览器。</p><blockquote><p>FTP文件传输协议,DNS域名协议,HTTP超文本传输协议</p></blockquote><p>传输层：发送数据包到计算机上使用特定端口号的应用程序。</p><blockquote><p>TCP传输控制协议,UDP用户数据报协议</p></blockquote><p>网络层：使用IP地址将数据包发送给特定的计算机，通过怎样的路径到达对方计算机，并把数据包传送给对方。</p><blockquote><p>IP网际协议,ARP地址解析协议</p></blockquote><p>链路层：将二进制数据包与网络信号相互之间转换，处理连接网络的硬件部分。</p><p><img src="/2022/04/08/ji-suan-ji-wang-luo/post3_1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>学习区</category>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回忆录</title>
    <link href="/2022/04/06/hui-yi-lu/"/>
    <url>/2022/04/06/hui-yi-lu/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b494843f732b2bd47d3ff63852c50e7f44304a4608319be464dd855a550f6153"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>生活区</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端学习规划及进度</title>
    <link href="/2022/04/04/qian-duan-xue-xi-jin-du-ji-gui-hua/"/>
    <url>/2022/04/04/qian-duan-xue-xi-jin-du-ji-gui-hua/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录自己的前端学习情况，奥里给！🚀</p></blockquote><span id="more"></span><h1 id="前端入门"><a href="#前端入门" class="headerlink" title="前端入门"></a>前端入门</h1><div>            <input type="checkbox" disabled="">html+css          </div><ul><li>📺pink老师前端入门：<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li><li>📄HTML教程：<a href="https://www.runoob.com/html/html-attributes.html">https://www.runoob.com/html/html-attributes.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习区</category>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/03/hello-world/"/>
    <url>/2022/04/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info.(Markdown语法查询➡️)</p><span id="more"></span><p class="note note-primary">我好像发现了一个新世界<br><br>最初是想建一个博客来充当笔记本，方便记录和回顾。然而，当我点开某评论区的一个链接后，接着友链-友链-...，我看到一个个用心记录的人，我爱上这里了。</p><p>ps:下面是一些markdown语法，主要是HTML形式~</p><h2 id="Tag-插件"><a href="#Tag-插件" class="headerlink" title="Tag 插件"></a>Tag 插件</h2><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;p class="note note-primary"&gt;标签&lt;/p&gt;</code></pre></div><p>可选标签：</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><div class="hljs code-wrapper"><pre><code class="hljs">&lt;span class="label label-primary"&gt;Label&lt;/span&gt;</code></pre></div><p>可选标签：<br><span class="label label-primary">primary</span><br><span class="label label-default">default</span><br><span class="label label-info">info</span><br><span class="label label-success">success</span><br><span class="label label-warning">warning</span><br><span class="label label-danger">danger</span></p><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div class="hljs code-wrapper"><pre><code class="hljs">{% cb text, checked?, incline? %}</code></pre></div><p>text: 显示文字<br>checked: 是否勾选，默认false<br>incline: 是否内联，默认false</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><div class="hljs code-wrapper"><pre><code class="hljs">&lt;a href="超链接地址" title="超链接title"&gt;超链接显示名&lt;/a&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习区</category>
      
      <category>工具</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
